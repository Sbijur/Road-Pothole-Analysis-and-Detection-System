import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import pandas as pd
import os
from skimage.transform import resize
from skimage.io import imread
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

#Taking image databases as input
Categories = ['Pothole','Normal']
flat_data_arr = []  # input array
target_arr = []  # output array
datadir = '/content/drive/MyDrive/model/train'
# path which contains all the categories of images
for i in Categories:

    print(f'loading... category : {i}')
    path = os.path.join(datadir, i)
    for img in os.listdir(path):
        img_array = imread(os.path.join(path, img))
        img_resized = resize(img_array, (150, 150, 3))
        flat_data_arr.append(img_resized.flatten())
        target_arr.append(Categories.index(i))
    print(f'loaded category:{i} successfully')
flat_data = np.array(flat_data_arr)
target = np.array(target_arr)
df = pd.DataFrame(flat_data)  # dataframe
df['Target'] = target
x = df.iloc[:, :-1]  # input data
y = df.iloc[:, -1]  # output data
x=np.array(x)
x=x.reshape(-1,150,150,3)
y=np.array(y)

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)
# build the CNN model
cnn_model = Sequential()
cnn_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
cnn_model.add(MaxPooling2D((2, 2)))
cnn_model.add(Conv2D(64, (3, 3), activation='relu'))
cnn_model.add(MaxPooling2D((2, 2)))
cnn_model.add(Conv2D(128, (3, 3), activation='relu'))
cnn_model.add(MaxPooling2D((2, 2)))
cnn_model.add(Flatten())
cnn_model.add(Dense(128, activation='relu'))
cnn_model.add(Dense(1, activation='sigmoid'))

# compile the CNN model
cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# train the CNN model
cnn_model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# use the trained CNN model to extract features from the images
X_train_features = cnn_model.predict(X_train)
X_test_features = cnn_model.predict(X_test)

# build the SVM model using the extracted features
svm_model = SVC(kernel='rbf', gamma='scale',probability=True)
svm_model.fit(X_train_features, y_train)

# evaluate the SVM model on the testing set
y_pred = svm_model.predict(X_test_features)
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))
print(f"The model is {accuracy_score(y_pred,y_test)*100}% accurate")
